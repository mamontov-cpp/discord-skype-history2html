<?php
/* Script that processes output of  split.php, downloading and replacing preview image links.
   Next you can fill template, using stringstomenu.php and copy it to resulting files into folder.
   All related output and data folders must be created before running script.
   Note, that you must download avatar images and set those paths before running script.
 */
require_once("vendor/autoload.php");
global $outputFolder,
	   $outputFilePrefix,
	   $originalFilePrefixWithoutHyphen,
	   $avatarPathMapping,
	   $destinationPreviewFolder;
// Output folder, where the original files are stored and 
$outputFolder = "outdiscord";
// Output file prefix, used, when writing final html
$outputFilePrefix = "out-";
// Prefix of files, generated by discordreiterate without hyphen
$originalFilePrefixWithoutHyphen = "orig";

// Avatar path mapping maps avatars from online to their local counterparts, that should be downloaded and placed in folder, accessible from destination files to be replaced in dialog.
$avatarPathMapping = array(
	"https://cdn.discordapp.com/avatars/259360369712168960/2a2ceaace88a3dadc00feb75a171686.png" => "data/ava1.png",
	"https://cdn.discordapp.com/avatars/186977393661968394/268a8ede96a5aa1bbd844a7db0a6713.png" => "data/ava2.png"
);
// A destination folder, placed in $outputFolder, which previews will be saved to
$destinationPreviewFolder  = "data";

// ===================== HERE WHERE THE SCRIPT STARTS =====================
set_time_limit(0);

function startsWith( $haystack, $needle ) {
     $length = strlen( $needle );
     return substr( $haystack, 0, $length ) === $needle;
}


function baseExtension($file) {
	$f = explode("/", $file);
	$f = $f[count($f) - 1];
	$f = explode(".", $file);
	$f = $f[count($f) - 1];
	$f = explode(":", $f);
	$f = $f[0];
	$f = explode("?", $f);
	$f = $f[0];
	$f = str_replace("/", "", $f);
	return $f;
}


function try_handle_file(&$html, &$counter, $file, $dt) {
	global $outputFolder, $destinationPreviewFolder;
	$ext = baseExtension($file);
	echo "Processing " . $file . "\n";
	if (mb_strlen($ext) >= 3 && mb_strlen($ext) <= 4) {
		echo ("Downloading - ");
		$outlink = "$destinationPreviewFolder/$dt-$counter.$ext";
		$outfile = "$outputFolder/$outlink";
		$fp = fopen ($outfile, 'w+');
		$ch = curl_init($file);
		curl_setopt($ch, CURLOPT_TIMEOUT, 60);
		curl_setopt($ch, CURLOPT_FILE, $fp); 
		curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
		curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
		curl_exec($ch);
		if (mb_strlen(curl_error($ch)) == 0) {
			$html = str_replace($file, $outlink, $html);
			echo "Downloaded!\n";
		} else {
			echo "Error!\n";
		}
		curl_close($ch);
		fclose($fp);
		$counter = $counter + 1;
	}
}

$files = scandir($outputFolder);
foreach ($files as $file) {
	if (startsWith($file, $originalFilePrefixWithoutHyphen)) {
		$html = file_get_contents($outputFolder . "/" . $file);
		foreach ($avatarPathMapping as $globalPath => $localPath) {
			$html = str_replace($globalPath, $localPath, $html);
		}
		
		$dt = str_replace(array(".html", $originalFilePrefixWithoutHyphen . "-"), array("",""), $file);
		$parts = explode("-", $dt);
		$hashinfo = intval($parts[0]) * 10000 + intval($parts[1]) * 100 + $parts[2];
		//if ($hashinfo < 200821) {
		//	continue;
		//}
		$counter = 0;
		
		$dom = new \nokogiri($html);
		$elements = $dom->get("img.chatlog__embed-thumbnail")->getDom()->firstChild->childNodes;
		foreach ($elements as $element) {
			try_handle_file($html, $counter, $element->getAttribute("src"), $dt);
		}
		$elements = $dom->get(".chatlog__attachment source")->getDom()->firstChild->childNodes;
		foreach ($elements as $element) {
			try_handle_file($html, $counter, $element->getAttribute("src"), $dt);
		}
		$elements = $dom->get(".chatlog__attachment img")->getDom()->firstChild->childNodes;
		foreach ($elements as $element) {
			try_handle_file($html, $counter, $element->getAttribute("src"), $dt);
		}
		$elements = $dom->get(".chatlog__attachment-thumbnail")->getDom()->firstChild->childNodes;
		foreach ($elements as $element) {
			try_handle_file($html, $counter, $element->getAttribute("src"), $dt);
		}		
		$outfile = "{$outputFolder}/{$outputFilePrefix}{$dt}.html";
		file_put_contents($outfile, $html);
		echo "Written output file " . $outfile . "\n";
	}
}